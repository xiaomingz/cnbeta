package com.ming.cnbeta.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ming.cnbeta.db.greendao.CommentItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tb_CommentItem.
*/
public class CommentItemDao extends AbstractDao<CommentItem, String> {

    public static final String TABLENAME = "tb_CommentItem";

    /**
     * Properties of entity CommentItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Score = new Property(0, Integer.class, "score", false, "SCORE");
        public final static Property Tid = new Property(1, String.class, "tid", true, "TID");
        public final static Property Pid = new Property(2, String.class, "pid", false, "PID");
        public final static Property Sid = new Property(3, Integer.class, "sid", false, "SID");
        public final static Property Reason = new Property(4, Integer.class, "reason", false, "REASON");
        public final static Property Icon = new Property(5, String.class, "icon", false, "ICON");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property Comment = new Property(8, String.class, "comment", false, "COMMENT");
        public final static Property Host_name = new Property(9, String.class, "host_name", false, "HOST_NAME");
        public final static Property RefContent = new Property(10, String.class, "refContent", false, "REF_CONTENT");
    };


    public CommentItemDao(DaoConfig config) {
        super(config);
    }
    
    public CommentItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tb_CommentItem' (" + //
                "'SCORE' INTEGER," + // 0: score
                "'TID' TEXT PRIMARY KEY NOT NULL ," + // 1: tid
                "'PID' TEXT," + // 2: pid
                "'SID' INTEGER," + // 3: sid
                "'REASON' INTEGER," + // 4: reason
                "'ICON' TEXT," + // 5: icon
                "'DATE' TEXT," + // 6: date
                "'NAME' TEXT," + // 7: name
                "'COMMENT' TEXT," + // 8: comment
                "'HOST_NAME' TEXT," + // 9: host_name
                "'REF_CONTENT' TEXT);"); // 10: refContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tb_CommentItem'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CommentItem entity) {
        stmt.clearBindings();
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(1, score);
        }
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(3, pid);
        }
 
        Integer sid = entity.getSid();
        if (sid != null) {
            stmt.bindLong(4, sid);
        }
 
        Integer reason = entity.getReason();
        if (reason != null) {
            stmt.bindLong(5, reason);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(9, comment);
        }
 
        String host_name = entity.getHost_name();
        if (host_name != null) {
            stmt.bindString(10, host_name);
        }
 
        String refContent = entity.getRefContent();
        if (refContent != null) {
            stmt.bindString(11, refContent);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public CommentItem readEntity(Cursor cursor, int offset) {
        CommentItem entity = new CommentItem( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // score
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pid
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sid
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // reason
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // icon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // comment
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // host_name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // refContent
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CommentItem entity, int offset) {
        entity.setScore(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setReason(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setComment(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHost_name(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRefContent(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CommentItem entity, long rowId) {
        return entity.getTid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CommentItem entity) {
        if(entity != null) {
            return entity.getTid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
