package com.ming.cnbeta.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ming.cnbeta.db.greendao.NewsDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tb_NewsDetail.
*/
public class NewsDetailDao extends AbstractDao<NewsDetail, String> {

    public static final String TABLENAME = "tb_NewsDetail";

    /**
     * Properties of entity NewsDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sid = new Property(0, String.class, "sid", true, "SID");
        public final static Property SN = new Property(1, String.class, "SN", false, "SN");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Source = new Property(4, String.class, "source", false, "SOURCE");
        public final static Property SourceLink = new Property(5, String.class, "sourceLink", false, "SOURCE_LINK");
        public final static Property Intro = new Property(6, String.class, "intro", false, "INTRO");
        public final static Property TopicId = new Property(7, Integer.class, "topicId", false, "TOPIC_ID");
        public final static Property TopicTitle = new Property(8, String.class, "topicTitle", false, "TOPIC_TITLE");
        public final static Property TopicImage = new Property(9, String.class, "topicImage", false, "TOPIC_IMAGE");
        public final static Property Content = new Property(10, String.class, "content", false, "CONTENT");
        public final static Property Author = new Property(11, String.class, "author", false, "AUTHOR");
        public final static Property Comment_num = new Property(12, Integer.class, "comment_num", false, "COMMENT_NUM");
        public final static Property View_num = new Property(13, Integer.class, "view_num", false, "VIEW_NUM");
    };


    public NewsDetailDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tb_NewsDetail' (" + //
                "'SID' TEXT PRIMARY KEY NOT NULL ," + // 0: sid
                "'SN' TEXT," + // 1: SN
                "'TITLE' TEXT," + // 2: title
                "'DATE' TEXT," + // 3: date
                "'SOURCE' TEXT," + // 4: source
                "'SOURCE_LINK' TEXT," + // 5: sourceLink
                "'INTRO' TEXT," + // 6: intro
                "'TOPIC_ID' INTEGER," + // 7: topicId
                "'TOPIC_TITLE' TEXT," + // 8: topicTitle
                "'TOPIC_IMAGE' TEXT," + // 9: topicImage
                "'CONTENT' TEXT," + // 10: content
                "'AUTHOR' TEXT," + // 11: author
                "'COMMENT_NUM' INTEGER," + // 12: comment_num
                "'VIEW_NUM' INTEGER);"); // 13: view_num
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tb_NewsDetail'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsDetail entity) {
        stmt.clearBindings();
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(1, sid);
        }
 
        String SN = entity.getSN();
        if (SN != null) {
            stmt.bindString(2, SN);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(5, source);
        }
 
        String sourceLink = entity.getSourceLink();
        if (sourceLink != null) {
            stmt.bindString(6, sourceLink);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(7, intro);
        }
 
        Integer topicId = entity.getTopicId();
        if (topicId != null) {
            stmt.bindLong(8, topicId);
        }
 
        String topicTitle = entity.getTopicTitle();
        if (topicTitle != null) {
            stmt.bindString(9, topicTitle);
        }
 
        String topicImage = entity.getTopicImage();
        if (topicImage != null) {
            stmt.bindString(10, topicImage);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(11, content);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(12, author);
        }
 
        Integer comment_num = entity.getComment_num();
        if (comment_num != null) {
            stmt.bindLong(13, comment_num);
        }
 
        Integer view_num = entity.getView_num();
        if (view_num != null) {
            stmt.bindLong(14, view_num);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewsDetail readEntity(Cursor cursor, int offset) {
        NewsDetail entity = new NewsDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SN
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // source
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sourceLink
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // intro
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // topicId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // topicTitle
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // topicImage
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // content
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // author
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // comment_num
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // view_num
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsDetail entity, int offset) {
        entity.setSid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSN(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSource(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSourceLink(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIntro(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTopicId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTopicTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTopicImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setContent(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAuthor(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setComment_num(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setView_num(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NewsDetail entity, long rowId) {
        return entity.getSid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NewsDetail entity) {
        if(entity != null) {
            return entity.getSid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
