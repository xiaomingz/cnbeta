package com.ming.cnbeta.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ming.cnbeta.db.greendao.NewsItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tb_NewsItem.
*/
public class NewsItemDao extends AbstractDao<NewsItem, String> {

    public static final String TABLENAME = "tb_NewsItem";

    /**
     * Properties of entity NewsItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sid = new Property(0, String.class, "sid", true, "SID");
        public final static Property Catid = new Property(1, String.class, "catid", false, "CATID");
        public final static Property Topic = new Property(2, String.class, "topic", false, "TOPIC");
        public final static Property Aid = new Property(3, String.class, "aid", false, "AID");
        public final static Property User_id = new Property(4, String.class, "user_id", false, "USER_ID");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Style = new Property(6, String.class, "style", false, "STYLE");
        public final static Property Keywords = new Property(7, String.class, "keywords", false, "KEYWORDS");
        public final static Property Hometext = new Property(8, String.class, "hometext", false, "HOMETEXT");
        public final static Property Listorder = new Property(9, String.class, "listorder", false, "LISTORDER");
        public final static Property Comments = new Property(10, String.class, "comments", false, "COMMENTS");
        public final static Property Counter = new Property(11, String.class, "counter", false, "COUNTER");
        public final static Property Mview = new Property(12, String.class, "mview", false, "MVIEW");
        public final static Property Collectnum = new Property(13, String.class, "collectnum", false, "COLLECTNUM");
        public final static Property Good = new Property(14, String.class, "good", false, "GOOD");
        public final static Property Bad = new Property(15, String.class, "bad", false, "BAD");
        public final static Property Score = new Property(16, String.class, "score", false, "SCORE");
        public final static Property Ratings = new Property(17, String.class, "ratings", false, "RATINGS");
        public final static Property Score_story = new Property(18, String.class, "score_story", false, "SCORE_STORY");
        public final static Property Ratings_story = new Property(19, String.class, "ratings_story", false, "RATINGS_STORY");
        public final static Property Pollid = new Property(20, String.class, "pollid", false, "POLLID");
        public final static Property Queueid = new Property(21, String.class, "queueid", false, "QUEUEID");
        public final static Property Ifcom = new Property(22, String.class, "ifcom", false, "IFCOM");
        public final static Property Ishome = new Property(23, String.class, "ishome", false, "ISHOME");
        public final static Property Elite = new Property(24, String.class, "elite", false, "ELITE");
        public final static Property Status = new Property(25, String.class, "status", false, "STATUS");
        public final static Property Inputtime = new Property(26, String.class, "inputtime", false, "INPUTTIME");
        public final static Property Updatetime = new Property(27, String.class, "updatetime", false, "UPDATETIME");
        public final static Property Thumb = new Property(28, String.class, "thumb", false, "THUMB");
        public final static Property Source = new Property(29, String.class, "source", false, "SOURCE");
        public final static Property Url_show = new Property(30, String.class, "url_show", false, "URL_SHOW");
        public final static Property Rate_sum = new Property(31, Integer.class, "rate_sum", false, "RATE_SUM");
    };


    public NewsItemDao(DaoConfig config) {
        super(config);
    }
    
    public NewsItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tb_NewsItem' (" + //
                "'SID' TEXT PRIMARY KEY NOT NULL ," + // 0: sid
                "'CATID' TEXT," + // 1: catid
                "'TOPIC' TEXT," + // 2: topic
                "'AID' TEXT," + // 3: aid
                "'USER_ID' TEXT," + // 4: user_id
                "'TITLE' TEXT," + // 5: title
                "'STYLE' TEXT," + // 6: style
                "'KEYWORDS' TEXT," + // 7: keywords
                "'HOMETEXT' TEXT," + // 8: hometext
                "'LISTORDER' TEXT," + // 9: listorder
                "'COMMENTS' TEXT," + // 10: comments
                "'COUNTER' TEXT," + // 11: counter
                "'MVIEW' TEXT," + // 12: mview
                "'COLLECTNUM' TEXT," + // 13: collectnum
                "'GOOD' TEXT," + // 14: good
                "'BAD' TEXT," + // 15: bad
                "'SCORE' TEXT," + // 16: score
                "'RATINGS' TEXT," + // 17: ratings
                "'SCORE_STORY' TEXT," + // 18: score_story
                "'RATINGS_STORY' TEXT," + // 19: ratings_story
                "'POLLID' TEXT," + // 20: pollid
                "'QUEUEID' TEXT," + // 21: queueid
                "'IFCOM' TEXT," + // 22: ifcom
                "'ISHOME' TEXT," + // 23: ishome
                "'ELITE' TEXT," + // 24: elite
                "'STATUS' TEXT," + // 25: status
                "'INPUTTIME' TEXT," + // 26: inputtime
                "'UPDATETIME' TEXT," + // 27: updatetime
                "'THUMB' TEXT," + // 28: thumb
                "'SOURCE' TEXT," + // 29: source
                "'URL_SHOW' TEXT," + // 30: url_show
                "'RATE_SUM' INTEGER);"); // 31: rate_sum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tb_NewsItem'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsItem entity) {
        stmt.clearBindings();
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(1, sid);
        }
 
        String catid = entity.getCatid();
        if (catid != null) {
            stmt.bindString(2, catid);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(3, topic);
        }
 
        String aid = entity.getAid();
        if (aid != null) {
            stmt.bindString(4, aid);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(5, user_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String style = entity.getStyle();
        if (style != null) {
            stmt.bindString(7, style);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(8, keywords);
        }
 
        String hometext = entity.getHometext();
        if (hometext != null) {
            stmt.bindString(9, hometext);
        }
 
        String listorder = entity.getListorder();
        if (listorder != null) {
            stmt.bindString(10, listorder);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(11, comments);
        }
 
        String counter = entity.getCounter();
        if (counter != null) {
            stmt.bindString(12, counter);
        }
 
        String mview = entity.getMview();
        if (mview != null) {
            stmt.bindString(13, mview);
        }
 
        String collectnum = entity.getCollectnum();
        if (collectnum != null) {
            stmt.bindString(14, collectnum);
        }
 
        String good = entity.getGood();
        if (good != null) {
            stmt.bindString(15, good);
        }
 
        String bad = entity.getBad();
        if (bad != null) {
            stmt.bindString(16, bad);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(17, score);
        }
 
        String ratings = entity.getRatings();
        if (ratings != null) {
            stmt.bindString(18, ratings);
        }
 
        String score_story = entity.getScore_story();
        if (score_story != null) {
            stmt.bindString(19, score_story);
        }
 
        String ratings_story = entity.getRatings_story();
        if (ratings_story != null) {
            stmt.bindString(20, ratings_story);
        }
 
        String pollid = entity.getPollid();
        if (pollid != null) {
            stmt.bindString(21, pollid);
        }
 
        String queueid = entity.getQueueid();
        if (queueid != null) {
            stmt.bindString(22, queueid);
        }
 
        String ifcom = entity.getIfcom();
        if (ifcom != null) {
            stmt.bindString(23, ifcom);
        }
 
        String ishome = entity.getIshome();
        if (ishome != null) {
            stmt.bindString(24, ishome);
        }
 
        String elite = entity.getElite();
        if (elite != null) {
            stmt.bindString(25, elite);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(26, status);
        }
 
        String inputtime = entity.getInputtime();
        if (inputtime != null) {
            stmt.bindString(27, inputtime);
        }
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(28, updatetime);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(29, thumb);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(30, source);
        }
 
        String url_show = entity.getUrl_show();
        if (url_show != null) {
            stmt.bindString(31, url_show);
        }
 
        Integer rate_sum = entity.getRate_sum();
        if (rate_sum != null) {
            stmt.bindLong(32, rate_sum);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewsItem readEntity(Cursor cursor, int offset) {
        NewsItem entity = new NewsItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // catid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // topic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // aid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // style
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // keywords
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hometext
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // listorder
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // comments
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // counter
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mview
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // collectnum
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // good
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // bad
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // score
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ratings
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // score_story
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // ratings_story
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // pollid
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // queueid
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // ifcom
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // ishome
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // elite
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // status
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // inputtime
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // updatetime
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // thumb
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // source
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // url_show
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31) // rate_sum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsItem entity, int offset) {
        entity.setSid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCatid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTopic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStyle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKeywords(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHometext(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setListorder(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setComments(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCounter(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMview(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCollectnum(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGood(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBad(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setScore(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRatings(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setScore_story(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRatings_story(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPollid(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setQueueid(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIfcom(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIshome(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setElite(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setStatus(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setInputtime(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setUpdatetime(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setThumb(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setSource(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setUrl_show(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setRate_sum(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NewsItem entity, long rowId) {
        return entity.getSid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NewsItem entity) {
        if(entity != null) {
            return entity.getSid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
